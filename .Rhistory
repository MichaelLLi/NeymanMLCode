library(aciccomp2016)
library(tidyverse)
library(doParallel)
library(foreach)
library(tictoc)
library(comprehenr)
library(MASS)
library(quadprog)
library(glmnet)
library(evalITR)
truth$t
truth$t1
truth
library(aciccomp2016)
library(tidyverse)
library(doParallel)
library(foreach)
library(tictoc)
library(comprehenr)
library(MASS)
library(quadprog)
library(glmnet)
library(evalITR)
truePAPE <- function(truth, That) {
n = length(That)
phat = mean(That)
pape = (sum(truth$mu.1[That==1]) + sum(truth$mu.0[That==0])) / n - (phat * mean(truth$mu.1) + (1-phat) * mean(truth$mu.0))
return(pape)
}
dgp_2016_sample <- function(truth, n, random.seed) {
random.seed <- list(seed = random.seed, kind = "Mersenne-Twister", normal.kind = "Inversion", sample.kind = "Rounding")
suppressWarnings(do.call("set.seed", random.seed))
selected_sample = sample(1:nrow(truth$x),n, replace = FALSE)
mu.0 = truth$mu.0[selected_sample]
mu.1 = truth$mu.1[selected_sample]
x = truth$x[selected_sample,]
sigma_y = 1
n1=round(n/2)
n0=n-n1
zind=sample(1:n,size=n1)
z=numeric(n)
z[zind]=1
mu = z * mu.1 + (1-z) * mu.0
y <- mu + sigma_y*rnorm(n)
result <- list(x = x, z = z, y =y, mu.1 = mu.1, mu.0 = mu.0)
}
ntrials = 1000
no_cores <- 5
cl <- makeCluster(no_cores)
registerDoParallel(cl)
m = 1
input_x = input_2016
final_output8 = as.list(numeric(99))
dim(final_output8) <- c(11,9)
truth = dgp_2016(input_x, 28, 1,extraInfo=TRUE)
shift_factor = mean(truth$y)
std_dev = sd(truth$y)
for (s in -5:5) {
train = dgp_2016_sample(truth, nrow(input_x), 2021)
y_train = train$y
x_train = train$x
x_train_expand = model.matrix(~.-1,data=x_train)
z_train = train$z
y_train_transformed = y_train * (z_train - mean(z_train)) / (mean(z_train) * (1- mean(z_train)))
ls1<-glmnet(x_train_expand,y_train_transformed,alpha = 1, lambda= 0.05)
nseq = 500
tau_full1<-predict(ls1,x_train_expand)
Thatfull = as.numeric(tau_full1 >0)
PAPEavg<- truePAPE(train,Thatfull)
tic()
expresult=foreach (l=1:ntrials) %dopar% {
library(glmnet)
library(dplyr)
library(evalITR)
test = dgp_2016_sample(truth, nseq, l)
y_test = test$y - shift_factor + s
x_test = test$x
z_test = test$z
x_test_expand = model.matrix(~.-1,data=x_test)
tau_test1<-predict(ls1,x_test_expand)
That = as.numeric(tau_test1 >0)
output = PAPE(z_test,That,y_test, budget= NA, centered = FALSE)
pape = output$pape
sdt = output$sd
return(list(pape+1.96*sdt, pape, pape-1.96*sdt, sdt))
}
toc()
PAPEu=matrix(unlist(map(expresult,1)),nrow = ntrials, byrow = TRUE)
PAPEm=matrix(unlist(map(expresult,2)),nrow = ntrials, byrow = TRUE)
PAPEl=matrix(unlist(map(expresult,3)),nrow = ntrials, byrow = TRUE)
sdm=matrix(unlist(map(expresult,4)),nrow = ntrials, byrow = TRUE)
coverage=colSums(sweep(PAPEu,2,PAPEavg,">") & sweep(PAPEl,2,PAPEavg,"<"))/ntrials
rmse = sqrt(colMeans((sweep(PAPEm,2,PAPEavg))*(sweep(PAPEm,2,PAPEavg))))
mad = colMeans(abs(sweep(PAPEm,2,PAPEavg)))
asd = apply(PAPEm,2,sd)
rmsesd= sqrt(colMeans((sweep(sdm,2,asd))*(sweep(sdm,2,asd))))
madsd = colMeans(abs(sweep(sdm,2,asd)))
final_output8[[s+6,1]]=nseq
final_output8[[s+6,2]]=coverage
final_output8[[s+6,3]]=PAPEavg
final_output8[[s+6,4]]=colMeans(PAPEm)-PAPEavg
final_output8[[s+6,5]]=asd
final_output8[[s+6,6]]=rmse
final_output8[[s+6,7]]=mad
final_output8[[s+6,8]]=rmsesd
final_output8[[s+6,9]]=madsd
print(s)
}
stopCluster(cl)
install.packages("evalITR")
install.packages("evalITR")
install.packages("evalITR")
install.packages("evalITR")
install.packages("evalITR")
install.packages("evalITR")
